import random
import sys
from datetime import *
from random import shuffle

from corovan_config import *
from engine import *


class Camel(object):
    """ –ö–ª–∞—Å—Å —Ä–∞–±–æ—á–µ–≥–æ """

    def __init__(self):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        self.power = 0
        self.speed = 0
        self.hp = 0
        self.ammo = 0
        self.gold = 0
        self.injuries = 0
        self.action = ""
        self.hours = 0
        self.mins = 0
        self.secs = 0
        self.walkHunt = 0
        self.walkTree = 0
        self.walkFish = 0
        self.walkCloth = 0
        self.walkStone = 0
        self.walkIron = 0
        self.walkGround = 0


class CorovanCamel(Engine):
    """ –î–≤–∏–∂–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ """

    # –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è
    VERSION = 1.82

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞
    GAME_BOT_ID = -183457719

    # –ü—Ä–æ—Å—Ç–æ–π
    STATE_NONE = 1
    # –ò—â–µ–º –ø–æ—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
    STATE_WALK = 2
    # –°–º–æ—Ç—Ä–∏–º —Å–∫–ª–∞–¥
    STATE_STOR = 3
    # –†–∞–±–æ—Ç–∞–µ–º
    STATE_WORK = 4
    # –ñ–¥–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã
    STATE_COMM = 5
    # –ò–¥–µ—Ç —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—ã
    STATE_REST = 6
    # –ò–¥–µ—Ç –ª–µ—á–∏—Ç—å—Å—è
    STATE_HEAL = 7
    # –ò–¥–µ—Ç –Ω–∞ —Å—Ç–µ–Ω—ã
    STATE_WALL = 8

    def __init__(self, lock, config: dict, id: int, channel: int, color: int, token: str, action: str):
        """ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä """
        super().__init__(config, str(id), lock, token, color)
        self.id = id
        self.channel = channel
        self.defaction = action
        self.state = self.STATE_NONE
        self.time = datetime.min
        self.step = 0
        self.cmd = None
        self.upgrade = None
        self.defence = False
        self.wall = False
        self.door = False
        self.drop = False
        self.heartbeat = None
        self.ammo = 0
        self.worker = Camel()
        self.rules = []
        self.rules.append([self.doCheckAttack, self.compile(r"^üî•–í–∞—à–µ –ø–æ—Å–µ–ª–µ–Ω–∏–µ –ø–æ–¥–≤–µ—Ä–≥–ª–æ—Å—å –æ—Å–∞–¥–µ")])
        self.rules.append([self.doCheckAttackWall, self.compile(r"^üõ°–°—Ç–µ–Ω–∞.+?üë•–ó–∞—â–∏—Ç–Ω–∏–∫–æ–≤: (\d+)\/(\d+)")])
        self.rules.append([self.doCheckAttackAccept, self.compile(r"^üë•\[id%s\|.+? –∑–∞—â–∏—Ç–Ω–∏–∫–∞–º –≥–æ—Ä–æ–¥–∞" % id)])
        self.rules.append([self.doCheckAttackDone, self.compile(r"^üî•–ë–∏—Ç–≤–∞ –∑–∞ –ø–æ—Å–µ–ª–µ–Ω–∏–µ.+?(üó°–ü–æ–±–µ–¥–∞|‚ò†–ü–æ—Ä–∞–∂–µ–Ω–∏–µ)")])
        self.rules.append([self.doCheckAttackDoor, self.compile(r"^‚Äº–í–ù–ò–ú–ê–ù–ò–ï‚Äº.–í –ø–æ—Å–µ–ª–µ–Ω–∏–∏ –Ω–∞—á–∞–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–æ—Ä–æ—Ç–∞")])
        self.rules.append([self.doCheckWork, self.compile(r"^‚öï\[id%s\|.+? (–ª–µ–∫–∞—Ä—å).+?‚åõ–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: (\d+) —á–∞—Å" % id)])
        self.rules.append([self.doCheckWork, self.compile(r"^üôèüèª\[id%s\|.+? (–º–æ–Ω–∞—Å—Ç—ã—Ä–µ).+?‚åõ–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: (\d+) —á–∞—Å" % id)])
        self.rules.append([self.doCheckWork, self.compile(r"^[^üëÅ]\[id%s\|.+?, (—Å–µ—Ä–¥—Ü—É –ì–ª—É–±–∏–Ω)?.+‚åõ–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: (\d+) —á–∞—Å." % id)])
        self.rules.append([self.doCome, self.compile(r"^\[id%s\|.+? –¥–∞–≤–∞–π (.+)" % id)])
        self.rules.append([self.doSay, self.compile(r"^\[id%s\|.+? –ø—Ä–æ–±—É–π (.+)" % id)])
        self.rules.append([self.doReply, self.compile(r"^\[id%s\|.+? –¥–∞–π (.+)" % id)])
        self.rules.append([self.doDouble, self.compile(r"^\[id%s\|.+? –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ" % id)])
        self.rules.append([self.doDone, self.compile(r"\[id%s\|.+?, –í—ã —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å" % id)])
        self.rules.append([self.doDrop, self.compile(r"–≤—ã—à–µ–ª –ø—Ä—è–º–æ –∫ –≤–∞—à–µ–º—É –ø–æ—Å–µ–ª–µ–Ω–∏—é")])
        self.rules.append([self.doDrop, self.compile(r"–æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –ø–æ—Å–µ–ª–µ–Ω–∏—è")])
        self.rules.append([self.doDrop, self.compile(r"–ø—Ä—è–º–æ —Ä—è–¥–æ–º —Å –ø–æ—Å–µ–ª–µ–Ω–∏–µ–º")])
        self.rules.append([self.doHeal, self.compile(r"^‚öï–õ–µ—á–µ–±–Ω–∏—Ü–∞.+?–ó–∞–Ω—è—Ç–æ –∫–æ–µ–∫: (\d+)/(\d+)")])
        self.rules.append([self.doLeave, self.compile(r"^\[id%s\|.+? —Å—Ç–æ–π" % id)])
        self.rules.append([self.doPickup, self.compile(r"^.–î–æ–±—ã—Ç.? \d+ –µ–¥–∏–Ω–∏—Ü.?\s")])
        self.rules.append([self.doStart, self.compile(r"–ø–æ–≥–Ω–∞–ª–∏")])
        self.rules.append([self.doStart, self.compile(r"^–∫–æ—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—Ç")])
        self.rules.append([self.doStop, self.compile(r"—Å—Ç–æ–ø—ç")])
        self.rules.append([self.doStop, self.compile(r"^–∫–æ—Ä–æ–≤–∞–Ω —Å—Ç–æ–ø")])
        self.rules.append([self.doUpradeWant, self.compile(r"^\[id%s\|.+? –Ω–∞–¥–æ (.+?) –¥–æ" % id)])
        self.rules.append([self.doUpradeAccept, self.compile(r"^‚öí\[id%s\|.+? —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –Ω–∞—á–∞–ª–∞—Å—å" % id)])
        self.rules.append([self.doViewAbbat, self.compile(r"^\[id%s\|.+?, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å" % id)])
        self.rules.append([self.doViewProfile, self.compile(r"^üëë?\[id%s\|.+üëä.+?(\d+).+?üñê.+?(\d+).+?‚ù§.+?(\d+).+?üåï(\d+).+ü•ã(\d+).+üñ§.+?(\d+).+‚õè–¢–µ–∫—É—â–µ–µ –∑–∞–Ω—è—Ç–∏–µ:.+\*(.+?)\*(?:.+\(–æ—Å—Ç–∞–ª–æ—Å—å: (?:(\d+) —á–∞—Å\. )?(?:(\d+) –º–∏–Ω\. )?(?:(\d+) —Å–µ–∫\. \))?)?" % id)])
        self.rules.append([self.doViewStorage, self.compile(r"^–†–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ:.üå≤–î–µ—Ä–µ–≤–æ: (\d+).üçô–ö–∞–º–µ–Ω—å: (\d+).üß£–¢–∫–∞–Ω—å: (\d+).üìè–ñ–µ–ª–µ–∑–æ: (\d+).üçó–ï–¥–∞: (\d+)")])
        self.rules.append([self.doViewWorking, self.compile(r"üçñ(?:‚öí|(\d+)/(\d+)).+?üå≤(?:‚öí|(\d+)/(\d+)).+?üêü(?:‚öí|(\d+)/(\d+)).+?üß£(?:‚öí|(\d+)/(\d+)).+?üçô(?:‚öí|(\d+)/(\d+)).+?üìè(?:‚öí|(\d+)/(\d+)).+?üíÄ(?:‚öí|(\d+)/(\d+))")])
        self.rules.append([self.doViewTrade, self.compile(r"^\[id%s\|.+, —Ç–æ—Ä–≥–æ–≤–µ—Ü —Ç–∞–∫–∂–µ –∏–º–µ–µ—Ç.+?üåï–¶–µ–Ω–∞: (\d+) –∑–æ–ª–æ—Ç–∞" % id)])

        self.caption("–°orovan v%s" % self.VERSION, True)
        self.thread(self.run)

    def connected(self):
        """ –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ """
        if not self.heartbeat:
            self.name = self.getName()
            self.heartbeat = Thread(target=self.checkHeartbeat)
            self.heartbeat.start()
        return

    def run(self):
        """ –ñ–∏–∑–Ω–µ–Ω–Ω—ã–π —Ü–∏–∫–ª """
        # –ö–æ–º–∞–Ω–¥—ã –≤ –ª–∏—á–∫—É —Å —Å–µ–±—è
        if self.event.peer_id == self.id:
            self.work(False)
        # –ö–æ–º–∞–Ω–¥—ã —Å —á–∞—Ç–∞
        elif self.event.peer_id == self.channel:
            self.work(False)
        # –ö–æ–º–∞–Ω–¥—ã —Å –∞–ª–µ—Ä—Ç–µ—Ä–∞
        elif self.event.peer_id == self.config.alertID:
            self.work(False)
        return

    def getName(self):
        """ –û—á–µ–ª–æ–≤–µ—á–∏–≤–∞–Ω–∏–µ """
        tmpResult = self.session.method("users.get", {"user_ids": self.id})
        tmpResult = tmpResult[0]
        return "%s %s" % (tmpResult["first_name"], tmpResult["last_name"])

    def go(self, cmd: str, state: int = STATE_NONE):
        """ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã """
        if state and (self.state != self.STATE_COMM):
            self.state = state
        # –ó–∞–ø–æ–º–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–º–∞–Ω–¥—É
        self.cmd = cmd
        # –ü–æ–¥–æ–∂–¥–µ–º
        time.sleep(random.randint(200, 300) / 100)
        self.send(cmd)
        time.sleep(random.randint(200, 300) / 100)

    def checkWork(self):
        """ –û–±–∑–æ—Ä —Ä–∞–±–æ—Ç—ã """
        if self.state != self.STATE_NONE:
            return False
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ—è
        self.log("–ò–¥–µ–º –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É")
        self.go("@dngworld üèú'–ú–µ—Å—Ç–Ω–æ—Å—Ç—å", self.STATE_WALK)
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return True

    def checkAbbat(self):
        """ –û–±–∑–æ—Ä –º–æ–Ω–∞—Å—Ç—ã—Ä—è """
        if not self.defaction or self.step % 2 == 0:
            return False
        # –ü–æ—Å—á–∏—Ç–∞–µ–º—Å—è
        tmpCmd = None
        tmpHavePower = self.worker.power > 10
        tmpHaveSpeed = self.worker.speed > 10
        tmpHaveHp = self.worker.hp > 10
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–∞–º–æ–∏—Å—Ç—è–∑–∞–Ω–∏–µ –¥–ª—è —Å–∏–ª—ã
        if self.defaction == "—Å–∏–ª–∞":
            if tmpHaveSpeed:
                tmpCmd = "@dngworld üñê'"
            elif tmpHaveHp:
                tmpCmd = "@dngworld ‚ù§'"
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–∞–º–æ–∏—Å—Ç—è–∑–∞–Ω–∏–µ –¥–ª—è –ª–æ–≤–∫–æ—Å—Ç–∏
        elif self.defaction == "–ª–æ–≤–∫–æ—Å—Ç—å":
            if tmpHavePower:
                tmpCmd = "@dngworld üëä'"
            elif tmpHaveHp:
                tmpCmd = "@dngworld ‚ù§'"
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Å–∞–º–æ–∏—Å—Ç—è–∑–∞–Ω–∏–µ –¥–ª—è —Ö–ø
        elif self.defaction == "—Ö–ø":
            if tmpHavePower:
                tmpCmd = "@dngworld üëä'"
            elif tmpHaveSpeed:
                tmpCmd = "@dngworld üñê'"
        # –ï—Å–ª–∏ –∫–∞—á–∞—Ç—å –Ω–µ—á–µ–≥–æ - –≤—ã—Ö–æ–¥–∏–º
        if not tmpCmd:
            return False
        # –û—Ç–ø—Ä–∞–≤–∏–º –∏—Å–∫–∞—Ç—å –º–æ–Ω–∞—Å—Ç—ã—Ä—å
        self.log("–ò–¥—É –≤ –º–æ–Ω–∞—Å—Ç—ã—Ä—å –¥–ª—è –∫–∞—á–∞ %s" % self.defaction)
        self.go("@dngworld üèö'–ü–æ—Å–µ–ª–µ–Ω–∏–µ")
        self.go("@dngworld '–ú–æ–Ω–∞—Å—Ç—ã—Ä—å", self.STATE_REST)
        self.cmd = tmpCmd
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return True

    def checkHeal(self):
        """ –û–±–∑–æ—Ä –ª–µ—á–µ–±–Ω–∏—Ü—ã """
        if self.worker.injuries < self.config.injuries:
            return False
        # –û—Ç–ø—Ä–∞–≤–∏–º –∏—Å–∫–∞—Ç—å –º–æ–Ω–∞—Å—Ç—ã—Ä—å
        self.log("–ò–¥—É –≤ –±–æ–ª—å–Ω–∏—á–∫—É")
        self.go("@dngworld üèö'–ü–æ—Å–µ–ª–µ–Ω–∏–µ")
        self.go("@dngworld '–õ–µ—á–µ–±–Ω–∏—Ü–∞", self.STATE_HEAL)
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return True

    def checkAmmo(self):
        """ –û–±–∑–æ—Ä —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ """
        if self.worker.ammo >= self.config.ammo:
            return False
        self.go("@dngworld üèö'–ü–æ—Å–µ–ª–µ–Ω–∏–µ")
        self.go("@dngworld '–¢–æ—Ä–≥–æ–≤—ã–π –ø–æ—Å—Ç")
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return False

    def checkUpgrade(self):
        """ –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è """
        if not self.upgrade:
            return False
        # –û—Ç–∫—Ä–æ–µ–º –æ–ø—Ü–∏–∏
        if self.upgrade == "—Ç—Ä–æ–ø—ã":
            self.go("@dngworld '–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–≤–µ–Ω—å")
        else:
            self.go("@dngworld '–£–ª—É—á—à–∏—Ç—å %s" % self.upgrade)
        # –ó–∞–ø—É–ª–∏–º
        self.go("@dngworld '–£–ª—É—á—à–∞—Ç—å %s" % self.upgrade)
        self.upgrade = None
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return True

    def checkDefense(self):
        """ –£–ª—É—á—à–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è """
        if not self.defence:
            return False
        # –û—Ç–ø—Ä–∞–≤–∏–º –Ω–∞ —Å—Ç–µ–Ω—ã
        self.log("–ò–¥—É –Ω–∞ —Å—Ç–µ–Ω—ã")
        self.go("@dngworld üèö'–ü–æ—Å–µ–ª–µ–Ω–∏–µ")
        self.go("@dngworld '–°—Ç–µ–Ω–∞", self.STATE_WALL)
        # –•–æ–¥ –Ω–∞–π–¥–µ–Ω
        return True

    def checkHeartbeat(self):
        """ –°–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–µ–ª–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ """
        tmpTodayFunc = datetime.today
        while True:
            tmpToday = tmpTodayFunc()
            if self.state != self.STATE_COMM and tmpToday > self.time:
                self.time = tmpToday + timedelta(minutes=int(random.randint(30, 60)))
                self.send("@dngworld üé≠'–ü–µ—Ä—Å–æ–Ω–∞–∂")
            self.sleep(random.randint(180, 300), "—Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏—è")

    def doViewProfile(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è """
        if self.state == self.STATE_COMM:
            return
        else:
            self.state = self.STATE_NONE
        # –°—á–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.worker.power = self.toInt(match[1])
        self.worker.speed = self.toInt(match[2])
        self.worker.hp = self.toInt(match[3])
        self.worker.gold = self.toInt(match[4])
        self.worker.ammo = self.toInt(match[5])
        self.worker.injuries = self.toInt(match[6])
        self.worker.action = match[7]
        self.worker.hours = self.toInt(match[8])
        self.worker.mins = self.toInt(match[9])
        self.worker.secs = self.toInt(match[10])
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –µ—Å—Ç—å - –∑–∞–ø–∏—à–µ–º
        if self.worker.secs:
            self.state = self.STATE_WORK
            self.time = datetime.today() + timedelta(hours=self.worker.hours, minutes=self.worker.mins, seconds=self.worker.secs)
            self.log("–ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –¥–æ %s " % self.toUTC(self.time))
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ø–∞–¥–µ–Ω–∏–µ –Ω–∞ –¥–µ—Ä–µ–≤–Ω—é
        elif self.checkDefense():
            return
        # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–∞–∏–≤–∞–µ–º - –≥–ª—è–Ω–µ–º —Å—Ç—Ä–æ–µ–Ω–∏—è
        elif self.checkUpgrade():
            return
        # –î–ª—è —Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–∏–º –ª–µ—á–µ–±–Ω–∏—Ü—É
        elif self.checkHeal():
            return
        # –î–ª—è –∑–æ–ª–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ–∫—É–ø–∫—É –∞–º—É–Ω–∏—Ü–∏–∏
        elif self.checkAmmo():
            return
        # –î–ª—è —Ñ–µ—Ä–º–µ—Ä–æ–≤ –≥–ª—è–Ω–µ–º —Å–∫–ª–∞–¥, –∏–Ω–∞—á–µ —Å–∞–º–æ–∏—Å—Ç—è–∑–∞–Ω–∏–µ
        elif self.checkAbbat():
            return
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏, –∏–¥–µ–º –Ω–∞ —Ä–∞–±–æ—Ç—ã
        return self.checkWork()

    def doViewTrade(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–ø–æ—Å—Ç–∞ """
        tmpCost = self.toInt(match[1])
        if tmpCost > self.worker.gold:
            return
        # –ö—É–ø–∏–º
        time.sleep(random.randint(2000, 3000) / 100)
        self.send("@dngworld '–ö—É–ø–∏—Ç—å –∑–∞ %s" % tmpCost)

    def doViewWorking(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–µ–Ω–∏–π """
        if self.state != self.STATE_WALK:
            return
        # –°—á–∏—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.worker.walkHunt = self.toInt(match[2]) - self.toInt(match[1])
        self.worker.walkTree = self.toInt(match[4]) - self.toInt(match[3])
        self.worker.walkFish = self.toInt(match[6]) - self.toInt(match[5])
        self.worker.walkCloth = self.toInt(match[8]) - self.toInt(match[7])
        self.worker.walkStone = self.toInt(match[10]) - self.toInt(match[9])
        self.worker.walkIron = self.toInt(match[12]) - self.toInt(match[11])
        self.worker.walkGround = self.toInt(match[14]) - self.toInt(match[13])
        # –ì–ª—è–Ω–µ–º —Å–∫–ª–∞–¥
        self.go("@dngworld üëù'–°–∫–ª–∞–¥", self.STATE_STOR)

    def doViewAbbat(self, match: dict):
        """ –û–±–∑–æ—Ä –º–æ–Ω–∞—Å—Ç—ã—Ä—è """
        if self.state != self.STATE_REST:
            return
        time.sleep(random.randint(2000, 3000) / 100)
        self.send(self.cmd)

    def doViewStorage(self, match: dict):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É """
        if self.state != self.STATE_STOR:
            return
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —á—Ç–æ –∫–∞—á–∞—Ç—å
        if self.defaction:
            self.doWalkStore(match)
        else:
            self.doWalkSelf(match)
        return

    def doWalkStore(self, match: dict):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –∫–∞—á–∞ —Å–∫–ª–∞–¥–∞ """
        self.log("–ò–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ %s" % self.defaction)
        # –†–∞–∑–±–µ—Ä–µ–º
        tmpTree = int(self.toInt(match[1]) / 2)
        tmpStone = int(self.toInt(match[2]) / 2)
        tmpCloth = self.toInt(match[3])
        tmpIron = self.toInt(match[4])
        tmpEat = int(self.toInt(match[5]) / 2)
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–≤–∫–æ—Å—Ç—å
        if self.worker.walkGround and (self.worker.ammo < self.config.ammo):
            self.go("@dngworld '–ü–æ–¥–∑–µ–º–Ω—ã–µ —Ç—Ä–æ–ø—ã")
            self.go("@dngworld '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤–Ω–∏–∑")
            return
        elif self.defaction == "–ª–æ–≤–∫–æ—Å—Ç—å":
            if self.worker.walkFish and (tmpEat <= tmpCloth or not self.worker.walkCloth):
                self.go("@dngworld '–ë–µ—Ä–µ–≥")
                self.go("@dngworld '–ù–∞ —Ä—ã–±–∞–ª–∫—É")
                return
            elif self.worker.walkCloth:
                self.go("@dngworld '–ë–µ—Ä–µ–≥")
                self.go("@dngworld '–í—ã—Ä–∞—â–∏–≤–∞—Ç—å –ª–µ–Ω")
                return
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–∏–ª–∞
        elif self.defaction == "—Å–∏–ª–∞":
            if self.worker.walkHunt and (tmpEat <= tmpTree or not self.worker.walkTree):
                self.go("@dngworld '–ß–∞—â–∞")
                self.go("@dngworld '–ù–∞ –æ—Ö–æ—Ç—É")
                return
            elif self.worker.walkTree:
                self.go("@dngworld '–ß–∞—â–∞")
                self.go("@dngworld '–†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è")
                return
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ö–ø
        elif self.defaction == "—Ö–ø":
            if self.worker.walkStone and (tmpStone <= tmpIron or not self.worker.walkIron):
                self.go("@dngworld '–ì–æ—Ä—ã")
                self.go("@dngworld '–ö–æ–ª–æ—Ç—å –∫–∞–º–Ω–∏")
                return
            elif self.worker.walkIron:
                self.go("@dngworld '–ì–æ—Ä—ã")
                self.go("@dngworld '–î–æ–±—ã–≤–∞—Ç—å —Ä—É–¥—É")
                return
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–µ—Ç
        else:
            return self.doWalkSelf(match)
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        self.log("–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –º–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã")

    def doWalkSelf(self, match: dict):
        """ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–ª—è –∫–∞—á–∞ —Å—Ç–∞—Ç–æ–≤ """
        self.log("–ò–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç")
        # –†–∞–∑–±–µ—Ä–µ–º
        tmpSort = []
        tmpSort.append([self.worker.power, "p"])
        tmpSort.append([self.worker.speed, "s"])
        tmpSort.append([self.worker.hp, "h"])
        tmpSort.append([sys.maxsize, "u"])
        tmpSort.sort()
        # –†–∞–∑–±–µ—Ä–µ–º
        tmpTree = int(self.toInt(match[1]) / 2)
        tmpStone = int(self.toInt(match[2]) / 2)
        tmpCloth = self.toInt(match[3])
        tmpIron = self.toInt(match[4])
        tmpEat = int(self.toInt(match[5]) / 2)
        # –ü–æ–∏—â–µ–º
        for tmpVal, tmpType in tmpSort:
            if tmpType == "p":
                if self.worker.walkTree and (tmpTree <= tmpEat or not self.worker.walkHunt):
                    self.go("@dngworld '–ß–∞—â–∞")
                    self.go("@dngworld '–†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤—å—è")
                    return
                elif self.worker.walkHunt:
                    self.go("@dngworld '–ß–∞—â–∞")
                    self.go("@dngworld '–ù–∞ –æ—Ö–æ—Ç—É")
                    return
            elif tmpType == "s":
                if self.worker.walkFish and (tmpEat <= tmpCloth or not self.worker.walkCloth):
                    self.go("@dngworld '–ë–µ—Ä–µ–≥")
                    self.go("@dngworld '–ù–∞ —Ä—ã–±–∞–ª–∫—É")
                    return
                elif self.worker.walkCloth:
                    self.go("@dngworld '–ë–µ—Ä–µ–≥")
                    self.go("@dngworld '–í—ã—Ä–∞—â–∏–≤–∞—Ç—å –ª–µ–Ω")
                    return
            elif tmpType == "h":
                if self.worker.walkStone and (tmpStone <= tmpIron or not self.worker.walkIron):
                    self.go("@dngworld '–ì–æ—Ä—ã")
                    self.go("@dngworld '–ö–æ–ª–æ—Ç—å –∫–∞–º–Ω–∏")
                    return
                elif self.worker.walkIron:
                    self.go("@dngworld '–ì–æ—Ä—ã")
                    self.go("@dngworld '–î–æ–±—ã–≤–∞—Ç—å —Ä—É–¥—É")
                    return
            elif tmpType == "u":
                if self.worker.walkGround:
                    self.go("@dngworld '–ü–æ–¥–∑–µ–º–Ω—ã–µ —Ç—Ä–æ–ø—ã")
                    self.go("@dngworld '–°–ø—É—Å—Ç–∏—Ç—å—Å—è –≤–Ω–∏–∑")
                    return
        # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
        self.log("–ù–µ –Ω–∞—à–µ–ª —Ä–∞–±–æ—Ç—É")

    def doCheckAttack(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∞–¥–µ–Ω–∏—è """
        self.defence = True
        self.wall = False
        self.door = False

    def doCheckAttackWall(self, match: dict):
        """ –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞—Ç—å –Ω–∞ –∑–∞—â–∏—Ç—É """
        if self.state != self.STATE_WALL:
            return False
        # –ü–æ—Å—á–∏—Ç–∞–µ–º –º–µ—Å—Ç–∞
        tmpCount = self.toInt(match[1])
        tmpLimit = self.toInt(match[2])
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–æ–≤–∞—è
        self.defence = False
        # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞—Ç—å –Ω–∞ –∑–∞—â–∏—Ç—É –ª–∏–±–æ –æ—Ç–∫—Ä–æ–µ–º –¥–≤–µ—Ä–∏
        if tmpCount < tmpLimit:
            self.go("@dngworld '–ù–∞ –∑–∞—â–∏—Ç—É")
        elif not self.door:
            self.go("@dngworld '–û—Ç–∫—Ä—ã—Ç—å –≤–æ—Ä–æ—Ç–∞")
        return

    def doCheckAttackDoor(self, match: dict):
        """ –í–æ—Ä–æ—Ç–∞ —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è """
        self.defence = False
        self.door = True

    def doCheckAttackDone(self, match: dict):
        """ –ë–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω """
        if self.wall:
            self.sleep(random.randint(500, 20000) // 100, "–°–ª–µ–∑–∞—é —Å–æ —Å—Ç–µ–Ω—ã")
            self.go("@dngworld üé≠'–ü–µ—Ä—Å–æ–Ω–∞–∂")
            self.go("@dngworld '–û—Ç–º–µ–Ω–∏—Ç—å")
        # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.wall = False
        self.defence = False
        self.door = False

    def doCheckAttackAccept(self, match: dict):
        """ –£—Å–ø–µ—à–Ω–æ–µ –≤–ª–µ–∑–∞–Ω–∏–µ –Ω–∞ —Å—Ç–µ–Ω—É """
        self.wall = True
        self.state = self.STATE_WORK
        self.time = datetime.today() + timedelta(hours=12)
        self.log("–°—Ç–æ—é –Ω–∞ —Å—Ç–µ–Ω–µ –¥–æ %s" % self.toUTC(self.time))

    def doCheckWork(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ """
        tmpGround = match[1]
        tmpHours = self.toInt(match[2])
        # –û–ø—Ä–µ–¥–µ–ª–∏–º —Ä–æ—Ç–∞—Ü–∏—é
        if tmpGround:
            self.step = 0
        else:
            self.step += 1
        # –°–¥–≤–∏–Ω–µ–º –≤—Ä–µ–º—è
        self.state = self.STATE_WORK
        self.time = datetime.today() + timedelta(hours=tmpHours)
        self.log("–®–∞–≥: %s –Ω–∞ %s —á–∞—Å. –í—Ä–µ–º—è: %s " % (self.step, tmpHours, self.toUTC(self.time)))

    def doCome(self, match: dict):
        """ –ü—Ä–æ—Å—å–±–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É """
        self.go("@dngworld %s" % match[1])

    def doSay(self, match: dict):
        """ –ü—Ä–æ—Å—å–±–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É """
        self.go(match[1])

    def doReply(self, match: dict):
        """ –ü—Ä–æ—Å—å–±–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É """
        time.sleep(random.randint(2000, 3000) / 1000)
        self.send(match[1], reply=self.event.message_id)

    def doDouble(self, match: dict):
        """ –ü–æ–≤—Ç–æ—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ """
        if self.cmd:
            self.go(self.cmd)
            self.go("@dngworld üé≠'–ü–µ—Ä—Å–æ–Ω–∞–∂")
        return

    def doHeal(self, match: dict):
        """ –£—á–µ—Ç –∫–æ–µ–∫ –≤ –ª–µ—á–µ–±–Ω–∏—Ü–µ """
        if self.state != self.STATE_HEAL:
            return
        # –ü–æ—Å—á–∏—Ç–∞–µ–º –∫–æ–π–∫–∏
        tmpCount = self.toInt(match[1])
        tmpLimit = self.toInt(match[2])
        # –ï—Å—Ç—å –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        if tmpCount < tmpLimit:
            self.go("@dngworld '–õ–µ—á–∏—Ç—å —Ç—Ä–∞–≤–º—ã")
        else:
            self.time = datetime.today() + timedelta(hours=1)
            self.log("–ñ–¥—É –∫–æ–π–∫—É –≤ %s" % self.toUTC(self.time))
        return

    def doLeave(self, match: dict):
        """ –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –±–æ—Ç–∞ """
        if self.state != self.STATE_NONE:
            self.go("@dngworld üé≠'–ü–µ—Ä—Å–æ–Ω–∞–∂")
            self.go("@dngworld '–û—Ç–º–µ–Ω–∏—Ç—å", self.STATE_NONE)
        self.doStop(match)

    def doDrop(self, match: dict):
        """ –£—á–µ—Ç –¥—Ä–æ–ø–∞ –≤–µ—â–∏ """
        self.drop = True
        # –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º - —Å—Ä–∞–∑—É –∑–∞–±–µ—Ä–µ–º
        if self.state != self.STATE_WORK:
            self.go("@dngworld '–ó–∞–±—Ä–∞—Ç—å")
        return

    def doPickup(self, match: dict):
        """ –£—á–µ—Ç –ø–æ–¥–±–æ—Ä–∞ –≤–µ—â–∏ """
        self.drop = False

    def doDone(self, match: dict):
        """ –†–∞–±–æ—Ç–∞ –æ–∫–æ–Ω—á–µ–Ω–∞ """
        if self.state != self.STATE_COMM:
            self.state = self.STATE_NONE
            self.log("–ó–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É, –∂–¥–µ–º —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏—è")
        else:
            self.log("–ó–∞–∫–æ–Ω—á–∏–ª–∏ —Ä–∞–±–æ—Ç—É, –∂–¥–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞")
        # –ü—Ä–æ–≤–µ—Ä–∏–º –ª–µ–∂–∞—â–∏–π –¥—Ä–æ–ø
        if self.drop:
            self.send("@dngworld '–ó–∞–±—Ä–∞—Ç—å")
        return

    def doUpradeWant(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–µ–Ω–∏–π """
        self.log("–ü—Ä–∏–Ω—è—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ—Å—Ç—Ä–æ–π–∫—É %s" % match[1])
        self.upgrade = match[1]

    def doUpradeAccept(self, match: dict):
        """ –ù–∞—á–∞—Ç –∞–ø–≥—Ä–µ–π–¥ """
        self.state = self.STATE_WORK
        self.time = datetime.today() + timedelta(hours=1)
        self.log("–ù–∞—á–∞–ª –∞–ø–≥—Ä–µ–π–¥ –¥–æ %s" % self.toUTC(self.time))

    def doStart(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–µ–Ω–∏–π """
        self.state = self.STATE_NONE
        self.send("-> –∫–æ—Ä–æ–≤–∞–Ω –∑–∞–ø—É—â–µ–Ω", self.id)

    def doStop(self, match: dict):
        """ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–µ–Ω–∏–π """
        self.state = self.STATE_COMM
        self.send("-> –∫–æ—Ä–æ–≤–∞–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", self.id)


# –°–æ–∑–¥–∞–¥–∏–º
tmpConfig = Config()
# –°–º–µ—à–∞–µ–º –æ–ª–æ–≤—è–Ω–Ω—ã—Ö —Å–æ–ª–¥–∞—Ç–∏–∫–æ–≤
shuffle(tmpConfig.params)
# –°–æ–∑–¥–∞–¥–∏–º –æ–±—ä–µ–∫—Ç—ã
tmpLock = threading.Lock()
for tmpId, tmpChannel, tmpColor, tmpToken, tmpAction in tmpConfig.params:
    CorovanCamel(tmpLock, tmpConfig, tmpId, tmpChannel, tmpColor, tmpToken, tmpAction).sleep(random.randint(5000, 15000) // 1000, "–¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ")
